AWSTemplateFormatVersion: 2010-09-09
Description: Oh CNAPP Demo Template
Parameters:
  ProjectName:
    Description: Project Name (like workshop, immersionday, awsjams)
    Type: String
    Default: ambassador
  Environment:
    Description: Environment
    Type: String
    Default:  lab
  Author:
    Description: Author (should be meta data)
    Type: String
    Default: rdevera@tenable.com
  Version:
    Description: Version
    Type: String
    Default: v1
  WinDTUsername:
    Description:  Username for Windows Desktop
    Type: String
    Default: john
  WinDTPassword:
    Description: Password for Windows Desktop
    Type:  String
    Default: Tenable.One
Resources:
#############
#  IAM User #
#############

  OHcnappOverPrivilegedUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "overpriviledged-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "overprivilged-user"
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref OverPrivilegedUser
  UserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OverprivilegedPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
              - "s3:*"
              - "lambda:*"
              - "cloudwatch:*"
            Resource: "*"
      Users:
        - !Ref OHcnappOverPrivilegedUser

  OHcnappNewPrivilegedUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-new-privileged-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "new-privileged-user"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref  OHcnappNewPrivilegedUser

  OHcnappOverPrivilegedVersionUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-over-privileged-version-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "over-privileged-version-user"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref  OHcnappOverPrivilegedVersionUser

      
#############
# IAM Roles #
#############
  OHcnappOverPrivEC2Role:
    Type: AWS::IAM::Role
    Properties:
      Description: "Overprivileged Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappOverPrivEC2Role"]]

  OHcnappEC2PrivilegedEscalation:
    Type: AWS::IAM::Role
    Properties:
      Description: "Privileged Escalations"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappPrivilegedEscRole"]]
      Policies:
        - PolicyName: "CNAPP_ec2_inline_passrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect:  "Allow"
                Action: "iam:PassRole"
                Resource: "arn:aws:iam:::role/lambda_role"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  OHcnappLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Lambda Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappLambaRole"]]

  OHcnappAdminRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Admin Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::' 
                  - !Ref AWS::AccountId
                  - ':root'
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappAdminRole"]]
          
  OHcnappCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "CodeBuild Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappCodeBuildRole"]]
  OHcnappPublicSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPublicSG"
      GroupDescription: Enable SSH to my EC2Instance and port 8080 to 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 10.0.0.0/8
      VpcId: !Ref OHcnappVPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 378900f8-dfab-4a33-9496-c1ef74c8516b
  OHcnappWinDemoSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappWinDemoSG"
      GroupDescription: RDP access to windows server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 10.0.0.0/8
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      VpcId: !Ref OHcnappVPC
  OHcnappPrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPrivateSG"
      GroupDescription: comm between internal networks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9020
          ToPort: 9020
          CidrIp: 10.0.0.0/16 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 10.1.0.0/16
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: !Ref 
  OHcnappVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key:  Name 
          Value: !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-VPC" ]]
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fddde793-4fce-4f6f-939d-0d8781d3ba3d
  OHcnappPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d1663f3a-2a13-4f2e-bf43-8adbf683a5cc
  OHcnappIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b9b95cb8-e623-40d8-9c19-b6c361c76e79
  OHcnappRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OHcnappVPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 098c11b6-3f03-4c58-bd8a-be133ef73fe9
  OHcnappPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref OHcnappRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: OHcnappIGW
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0073d26b-d5df-4cf1-81cd-f8dad8f8ece7
    DependsOn:
      - OHcnappIGW
  OHcnappVPCGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref OHcnappVPC
      InternetGatewayId: !Ref OHcnappIGW
  OHcnappPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.1.0/24
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ed11ad6b-d0c4-4304-bcba-34b112fbb9bd
  OHcnappPrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPrivateSG"
      GroupDescription: comm between internal networks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9020
          ToPort: 9020
          CidrIp: 10.0.0.0/16 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 10.1.0.0/16
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: "OHcnappPrivateSG"
  
  OHcnappEC2InstanceProfile:
    Type:  AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OHcnappOverPrivEC2Role
  
  ###################
  ##  EC2 in VPC  ###
  ###################

  OHcnappPublicEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
#      ImageId: !Ref LatesetAmiId
      ImageId:  !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AAAMI
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.10'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
           DeleteOnTermination: "true"
      Tags:
      - Key: Name
        Value: "OHcnappPublicEC2"
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 793ef48f-2c1f-48a6-8877-3a44983adfff
#  Windows10EC2:
#    Type: 'AWS::EC2::Instance'
#    Properties:
#      InstanceType: t3.medium
#      ImageId: ami-0000ad655517bbcf5
#      ImageId:  !FindInMap 
#        - RegionMap
#        - !Ref 'AWS::Region'
#        - W10AMI
#      NetworkInterfaces:
#         - AssociatePublicIpAddress: "true"
#           PrivateIpAddress: '10.1.1.6'
#           DeviceIndex: "0"
#           GroupSet:
#             - Ref: OHcnappWinDemoSG
#           SubnetId: 
#            Ref: OHcnappPublicSubnet
#           DeleteOnTermination: "true"
#      Tags:
#        - Key: Name
#          Value: "WindowsRDP"
  AwsRouteTabAssoc:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OHcnappRouteTable
      SubnetId: !Ref OHcnappPublicSubnet
#  GitlabsS3Policy:
#    Type:  AWS::IAM::Policy
#    Properties:
#      PolicyName: "gl-s3-policy"
#      PolicyDocument:
#        Version: "2012-10-17",
#        Statement": 
#          - Effect: Allow
#            Action: 
#              - 's3:PutObject'
#              - 's3:GetObject'
#              - 's3:DeleteObject'
#              - 's3:PutObjectAcl'
#            Resource: 'arn:aws:s3:::gl-*/*'
#          - Effect: Allow
#            Action: 
#              - 's3:ListBucket'
#              - 's3:AbortMultipartUpload'
#              - 's3:ListMultipartUploadParts'
#              - 's3:ListBucketMultipartUploads'
#            Resource: 'arn:aws:s3:::gl-*'
#  GitLabS3AccesRole:
#    Type:  AWS::IAM::ServiceLinkedRole
#    Properties:
#      AWSServiceName: "ec2.amazonaws.com"        
Outputs:
  ExternalId:
    Value:  !Select [2, !Split [ '/', !Ref  AWS::StackId]]

Mappings:
  RegionMap:
#    us-east-1:
#      GUACAMI: ami-00ebca77849e4072b
#      W10AMI: ami-00b386e7d7fb65fdc
#      AAAMI: ami-0f6ee6ba26a44b0f7
    us-east-2:
#      GUACAMI: ami-0ec5f7389fb01598b
#      W10AMI: ami-06540a8b6d12df1ea
      AAAMI: ami-0a7fa328337f5020b
    us-west-2:
#      GUACAMI: ami-0bf18ec307863dcc5
#      W10AMI: ami-002a07f4f7c694d11
      AAAMI: ami-06448b8505d6cf29c
    us-west-1:
#      GUACAMI: ami-034bffbf234a264e9
#      W10AMI: ami-00a9d9ce4c6db5313
#
      AAAMI: ami-05a0e4e5aafb17026
