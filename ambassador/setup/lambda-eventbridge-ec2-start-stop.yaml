AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Lambda function with a scheduled EventBridge rule
Conditions:
  RegionCheck: !Equals
    - !Ref "AWS::Region"
    - us-east-1

Resources:
  # Lambda Function
  OHcnappDailyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'OHcnappDailyEC2Task'
      Runtime: 'python3.9'
      Handler: 'index.lambda_handler'
#      Role: !GetAtt OHcnappDailyLambdaExecutionRole.Arn
      Role:  !Sub "arn:aws:iam::${AWS::AccountId}:role/OHcnappDailyLambdaExecutionRole"
      Code:
        ZipFile: |

          import boto3
          import logging

          # Initialize logger
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize EC2 client
          ec2_client = boto3.client('ec2')

          def lambda_handler(event, context):
              # Expected event input: {"action": "start"} or {"action": "stop"}
              action = event.get("action", "").lower()

              if action not in ["start", "stop"]:
                  logger.error("Invalid action provided. Use 'start' or 'stop'.")
                  return {"status": "error", "message": "Invalid action"}

              # Get instances with the specific tag
              filters = [{
                  'Name': 'tag:platform',
                  'Values': ['lab']
              }]

              # Describe EC2 instances based on the tag filter
              instances = ec2_client.describe_instances(Filters=filters)
              instance_ids = []

              # Collect all instance IDs with the tag
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      instance_ids.append(instance['InstanceId'])

              if not instance_ids:
                  logger.info("No instances found with platform=lab.")
                  return {"status": "success", "message": "No instances to process"}

              # Start or stop instances based on action
              if action == "start":
                  response = ec2_client.start_instances(InstanceIds=instance_ids)
                  logger.info(f"Starting instances: {instance_ids}")
              elif action == "stop":
                  response = ec2_client.stop_instances(InstanceIds=instance_ids)
                  logger.info(f"Stopping instances: {instance_ids}")

              return {
                  "status": "success",
                  "message": f"Action '{action}' applied to instances: {instance_ids}",
                  "response": response
              }

      Timeout: 15

  # Lambda Execution Role
  OHcnappDailyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Condition:  RegionCheck
    Properties:
      RoleName: 'OHcnappDailyLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'OHcnappLogLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: 'OHcnappEC2LambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                Resource: '*'

  # EventBridge Rule for Lambda Function
  OHcnappEventBridgeStartRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'OHcnappEC2StartTrigger'
      ScheduleExpression: 'cron(0 10 ? * MON-FRI *)'  # 5 am Central Time (CST = UTC -6, CDT = UTC -5)
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt 'OHcnappDailyLambdaFunction.Arn'
          Id: 'OHcnappLambdaTarget'
          Input: '{"action": "start"}'

  # Permission for EventBridge to invoke the Lambda Function
  OHcnappStartLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
#      FunctionName: !GetAtt 'OHcnappDailyLambdaFunction.FunctionName'
      FunctionName: !Ref OHcnappDailyLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'OHcnappEventBridgeStartRule.Arn'

  # EventBridge Rule for Stopping Lambda Function

  OHcnappEventBridgeStopRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'OHcnappEC2StopTrigger'
      ScheduleExpression: 'cron(0 2 * * ? *)'  #  Central Time (CST = UTC -6, CDT = UTC -5)
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt 'OHcnappDailyLambdaFunction.Arn'
          Id: 'OHcnappLambdaTarget'
          Input: '{"action": "stop"}'


  OHcnappStopLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref 'OHcnappDailyLambdaFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'OHcnappEventBridgeStopRule.Arn'