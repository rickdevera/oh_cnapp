AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Lambda function with a scheduled EventBridge rule
Parameters:
  BaseRegionCheck:  !Equals
    - !Ref "AWS::Region"
    - us-east-1
    
Resources:
  # Lambda Function
  OHcnappLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'OHcnappDailyTask'
      Runtime: 'python3.9'
      Handler: 'index.handler'
      Role: !GetAtt 'OHcnappLambdaExecutionRole.Arn'
      Code:
        ZipFile: |

          import boto3

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')

              # Getting instances with the specific tag
              instances = ec2.describe_instances(
                  Filters=[
                      {'Name': 'tag:platform', 'Values': ['lab']}
                  ]
              )

              instance_ids = []
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      instance_ids.append(instance['InstanceId'])

              if not instance_ids:
                  print("No instances with the specified tag found.")
                  return

              # Check the operation to perform
              if event.get('operation') == 'start':
                  # Starting instances
                  ec2.start_instances(InstanceIds=instance_ids)
                  print(f"Started instances: {instance_ids}")
              elif event.get('operation') == 'stop':
                  # Stopping instances
                  ec2.stop_instances(InstanceIds=instance_ids)
                  print(f"Stopped instances: {instance_ids}")
              else:
                  print("Invalid operation specified. Use 'start' or 'stop'.")


      Timeout: 10

  # Lambda Execution Role
  OHcnappLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'OHcnappLambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'OHcnappLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  # EventBridge Rule for Lambda Function
  OHcnappEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'OHcnappDailyTrigger'
      ScheduleExpression: 'cron(0 13 * * ? *)'  # 8 am Central Time (CST = UTC -6, CDT = UTC -5)
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt 'OHcnappLambdaFunction.Arn'
          Id: 'OHcnappLambdaTarget'
          Input: '{"action": "start"}'

  # Permission for EventBridge to invoke the Lambda Function
  OHcnappLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Condition:  BaseRegionCheck
    Properties:
#      FunctionName: !GetAtt 'OHcnappLambdaFunction.FunctionName'
      FunctionName: !Ref OHcnappLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'OHcnappEventBridgeRule.Arn'
