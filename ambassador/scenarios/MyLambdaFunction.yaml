AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ProjectName:
    Description: Project Name (like workshop, immersionday, awsjams)
    Type: String
    Default: ambassador
  Environment:
    Description: Environment
    Type: String
    Default:  lab
  Author:
    Description: Author 
    Type: String
    Default: rdevera@tenable.com
  Version:
    Description: Version
    Type: String
    Default: v1
    
Description: Oh CNAPP Lambda Function with Secrets Template
Parameters:
  ProjectName:
    Description: Project Name (like workshop, immersionday, awsjams)
    Type: String
    Default: ambassador
  Environment:
    Description: Environment
    Type: String
    Default:  lab
  Author:
    Description: Author (should be meta data)
    Type: String
    Default: rdevera@tenable.com
  Version:
    Description: Version
    Type: String
    Default: v1
Description: >
  AWS CloudFormation Template: Lambda Function with Environment Variables for
  Authentication Credentials (Educational Purpose)

Resources:
  OHcnappLamdaFunction01:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt OHcnappLamdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              import os
              # Access environment variables
              username = os.environ['DB_USERNAME']
              password = os.environ['DB_PASSWORD']
              print(f"Using username {username} and password {password} for authentication")
              # Add your logic here
              return {
                'statusCode': 200,
                'body': 'Success'
              }
      Runtime: python3.8
      Environment:
        Variables:
          DB_USERNAME: 'exampleUsername'
          DB_PASSWORD: 'examplePassword'

  OHcnappLamdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
