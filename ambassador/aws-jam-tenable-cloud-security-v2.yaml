AWSTemplateFormatVersion: 2010-09-09
Description: Oh CNAPP Demo Template
Parameters:
  ProjectName:
    Description: Project Name (like workshop, immersionday, awsjams)
    Type: String
    Default: ambassador
  Environment:
    Description: Environment
    Type: String
    Default:  lab
  Author:
    Description: Author 
    Type: String
    Default: rdevera@tenable.com
  Version:
    Description: Version
    Type: String
    Default: v1
  WinDTUsername:
    Description:  Username for Windows Desktop
    Type: String
    Default: johndoe
  WinDTPassword:
    Description: Password for Windows Desktop
    Type:  String
    Default: cleartextsecretpassword
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'


Resources:
#############
#  IAM User #
#############

  OHcnappOverPrivilegedUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "overpriviledged-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "overprivilged-user"
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref OverPrivilegedUser
  UserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OverprivilegedPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
              - "s3:*"
              - "lambda:*"
              - "cloudwatch:*"
            Resource: "*"
      Users:
        - !Ref OHcnappOverPrivilegedUser

  OHcnappNewPrivilegedUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-new-privileged-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "new-privileged-user"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref  OHcnappNewPrivilegedUser

  OHcnappOverPrivilegedVersionUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-over-privileged-version-user"]]
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "over-privileged-version-user"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AdministratorAccess'
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref  OHcnappOverPrivilegedVersionUser

      
#############
# IAM Roles #
#############
  OHcnappOverPrivEC2Role:
    Type: AWS::IAM::Role
    Properties:
      Description: "Overprivileged Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappOverPrivEC2Role"]]

  OHcnappEC2PrivilegedEscalation:
    Type: AWS::IAM::Role
    Properties:
      Description: "Privileged Escalations"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappPrivilegedEscRole"]]
      Policies:
        - PolicyName: "CNAPP_ec2_inline_passrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect:  "Allow"
                Action: "iam:PassRole"
                Resource: "arn:aws:iam:::role/lambda_role"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
        
  OHcnappCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Code build Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappCodeBuildRole"]]

  OHcnappOverPrivLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Lambda Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappLambaRole"]]

######
## For the CG Vulnerable Lambda
#####

  OHcnappCGStandardUser:
    Type: AWS::IAM::User
    Properties:
      UserName:  !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "CGStandard-user"]]
      Policies:
        - PolicyName: "sid1"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                 - "sts:AssumeRole"
                Resource: !GetAtt OHcnappCGLambdaInvokerRole.Arn
        - PolicyName: "sid2"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                 - "iam:Get*"
                 - "iam:List*"
                 - "iam:SimulateCustomPolicy"
                 - "iam:SimulatePrincipalPolicy"
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Sub "${ProjectName}-${Environment}"
        - Key: Type
          Value: "CGStandard-user"

  OHcnappCGLambdaInvokerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Lambda Invoker Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "Lambda-Invoker"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
            - Effect:  "Allow"
              Action: 
                - "lambda:ListFunctionEventInvokeConfigs"
                - "lambda:InvokeFunction"
                - "lambda:ListTags"
                - "lambda:GetFunction"
                - "lambda:GetPolicy"
              Resource: "*"
            Statement:
            - Effect: "Allow"
              Action: 
                - "lambda:ListFunctions"
                - "iam:Get*"
                - "iam:List*"
                - "iam:SimulateCustomPolicy"
                - "iam:SimulatePrincipalPolicy"
              Resource: "*"
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappCGLambaInvokerRole"]]

################
  OHcnappAdminRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Admin Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::' 
                  - !Ref AWS::AccountId
                  - ':root'
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappAdminRole"]]
          
  OHcnappCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "CodeBuild Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappCodeBuildRole"]]

  OHcnappVendorDemoServiceRole:
    Type:  AWS::IAM::Role
    Properties:
      Description:  "3rd Party Vendor Service Role"
      AssumeRolePolicyDocument:
        Version:  "2012-10-17"
        Statement: 
          - Effect:  "Allow"
            Principal:
              Service:  "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'
        - 'arn:aws:iam::aws:policy/IAMReadOnlyAccess'
      Policies:
        - PolicyName:  "ServieRoleInlinePolicy"
          PolicyDocument: 
            Version:  "2012-10-17"
            Statement:
              - Effect:  "Allow"
                Action: 
                  - "iam:ListInstanceProfiles"
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:RemoveRoleFromInstanceProfile"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:PassRole"
                  - "iam:GetInstanceProfile"
                  - "iam:GetRole"
                  - "iam:ListAccountAliases"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListPolicies"
                  - "iam:AttachRolePolicy"
                Resource: "*"
      Tags:
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappVendorServiceRole"]]

#########
## Security Groups
#########

  OHcnappPublicSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPublicSG"
      GroupDescription: Enable SSH to my EC2Instance and port 8080 to 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: OHcnappPublicSG
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 378900f8-dfab-4a33-9496-c1ef74c8516b


  OHcnappWinDemoSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappWinDemoSG"
      GroupDescription: RDP access to windows server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: 10.0.0.0/8
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: OHcnappWinDemoSG

  OHcnappPrivateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPrivateSG"
      GroupDescription: comm between internal networks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9020
          ToPort: 9020
          CidrIp: 10.0.0.0/16 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: OHcnappPrivateSG

  OHcnappVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key:  Name 
          Value: !Join ["", [!Sub "${ProjectName}-${Environment}-", !Ref AWS::Region, "-VPC" ]]

  OHcnappPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select ['0', !GetAZs ''] 
  OHcnappPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.21.0/24
      AvailabilityZone: !Select ['1', !GetAZs '']

  OHcnappIGW:
    Type: 'AWS::EC2::InternetGateway'
  OHcnappRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OHcnappVPC

  OHcnappPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref OHcnappRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: OHcnappIGW
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0073d26b-d5df-4cf1-81cd-f8dad8f8ece7
    DependsOn:
      - OHcnappIGW
  OHcnappVPCGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref OHcnappVPC
      InternetGatewayId: !Ref OHcnappIGW
  OHcnappPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
  OHcnappPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OHcnappVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  OHcnappPrivateSG2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: "OHcnappPrivateSG2"
      GroupDescription: comm between internal networks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9020
          ToPort: 9020
          CidrIp: 10.0.0.0/16 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      VpcId: !Ref OHcnappVPC
      Tags:
        - Key: Name
          Value: "OHcnappPrivateSG2"
  
  OHcnappEC2InstanceProfile:
    Type:  AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref OHcnappOverPrivEC2Role
  
  ###################
  ##  EC2 in VPC  ###
  ###################

  OHcnappPublicEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
#      ImageId: !Ref LatesetAmiId
      ImageId:  !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AAAMI
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.10'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      Tags:
        - Key: Name
          Value: "OHcnappPublicEC2"
        - Key: platform
          Value: "lab"

  OHcnappEC2Workload01:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.21'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name log4shell_vulnerable_container -d -p 80:80 public.ecr.aws/i3j2g7c0/cnappgoat-images:log4shell_image
      Tags:
        - Key: Name
          Value: "OHcnappEC2Workload01"
        - Key: platform
          Value: "lab"

  OHcnappEC2Workload02:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.22'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name vulnerable_jenkins_container -d -p 80:80 public.ecr.aws/i3j2g7c0/cnappgoat-images:jenkins_image
      Tags:
        - Key: Name
          Value: "OHcnappEC2Workload02"
        - Key: platform
          Value: "lab"
          
  OHcnappEC2Workload03:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.23'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name vulnerable_tomcat_container -d -p 80:80 public.ecr.aws/i3j2g7c0/cnappgoat-images:tomcat_image
      Tags:
        - Key: Name
          Value: "OHcnappEC2Workload03"
        - Key: platform
          Value: "lab"

  OHcnappEC2Workload04:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.24'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name end_of_life_container -d -p 80:80 public.ecr.aws/i3j2g7c0/cnappgoat-images:end_of_life_ubuntu2110_image
      Tags:
        - Key: Name
          Value: "OHcnappEC2Workload04"
        - Key: platform
          Value: "lab"

  OHcnappEC2Workload05:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
#      ImageId: ami-0d803519bc74364e7
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref OHcnappEC2InstanceProfile
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           PrivateIpAddress: '10.1.1.25'
           DeviceIndex: "0"
           GroupSet:
             - Ref: OHcnappPublicSG
           SubnetId: 
            Ref: OHcnappPublicSubnet
      KeyName: !Ref OHcnappKeyPair 
      UserData:
        Fn::Base64: |
          #! /bin/bash
          yum update -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          docker run --name malicious_xmrig_container -d -p 80:80 public.ecr.aws/i3j2g7c0/cnappgoat-images:xmrig_image
      Tags:
        - Key: Name
          Value: "OHcnappEC2Workload05"
        - Key: platform
          Value: "lab"


  OHcnappKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyFormat: "pem"
      KeyName: "OHcnappKeyPair"
      Tags: 
        - Key: Name
          Value:  !Join ["", [!Sub "${ProjectName}-${Environment}-OHcnappKeyPair"]]
 
  AwsRouteTabAssoc:
    Type:  AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref OHcnappRouteTable
      SubnetId: !Ref OHcnappPublicSubnet



Outputs:

  ExternalId:
    Value:  !Select [2, !Split [ '/', !Ref  AWS::StackId]]


Mappings:
  RegionMap:
    us-east-1:
#      GUACAMI: ami-00ebca77849e4072b
#      W10AMI: ami-00b386e7d7fb65fdc
       AAAMI: ami-07b2e9a59dfd14005
#    us-east-2:
#      GUACAMI: ami-0ec5f7389fb01598b
#      W10AMI: ami-06540a8b6d12df1ea
#      AAAMI: ami-0a7fa328337f5020b
#    us-west-2:
#      GUACAMI: ami-0bf18ec307863dcc5
#      W10AMI: ami-002a07f4f7c694d11
#      AAAMI: ami-06448b8505d6cf29c
#    us-west-1:
#      GUACAMI: ami-034bffbf234a264e9
#      W10AMI: ami-00a9d9ce4c6db5313
#
#      AAAMI: ami-05a0e4e5aafb17026
